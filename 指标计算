   /** 转化MA5和MA10数据线 (收盘价之和除以该周期) */
    private void convertToMALine(List<Entry> entryListMA5Line, List<Entry> entryListMA10Line) {
        float sumMA5 = 0, sumMA10 = 0;

        for (int i = 0; i < techNodeArray.size(); i++) {
            //计算MA5
            if (i == 4) {
                sumMA5 = firstCalculateMASum(4);
                entryListMA5Line.add(new Entry(i, sumMA5 / 5));
            } else if (i > 4) {
                sumMA5 = sumMA5 - techNodeArray.get(i - 5).getClosePrice() + techNodeArray.get(i).getClosePrice();
                entryListMA5Line.add(new Entry(i, sumMA5 / 5));
                //                entryListMA5Line.add(new Entry(i, 80));
            }

            //计算MA10
            if (i == 9) {
                sumMA10 = firstCalculateMASum(9);
                entryListMA10Line.add(new Entry(i, sumMA10 / 10));
            } else if (i > 9) {
                sumMA10 = sumMA10 - techNodeArray.get(i - 9).getClosePrice() + techNodeArray.get(i).getClosePrice();
                entryListMA10Line.add(new Entry(i, sumMA10/10));
                //                entryListMA10Line.add(new Entry(i, 50));
            }
        }
    }

    /** 计算第一次的MA总和 */
    private float firstCalculateMASum(int endIndex) {
        float sum = 0;
        for (int i = 0; i <= endIndex; i++) {
            sum += techNodeArray.get(i).getClosePrice();
        }
        return sum;
    }



     /** 转化为EMA12和EMA26数据 */
    private void convertToEMALine(List<Entry> entryListEMA12Line, List<Entry> entryListEMA26Line) {
        float lastEMA12 = techNodeArray.get(0).getClosePrice();
        float lastEMA26 = techNodeArray.get(0).getClosePrice();
        for (int i = 0; i < techNodeArray.size(); i++) {
            if (i == 0) {
                entryListEMA12Line.add(new Entry(i, lastEMA12));
                entryListEMA26Line.add(new Entry(i, lastEMA26));
            } else {
                lastEMA12 = lastEMA12 * 11 / 13 + techNodeArray.get(i).getClosePrice() * 2 / 13;
                lastEMA26 = lastEMA26 * 25 / 27 + techNodeArray.get(i).getClosePrice() * 2 / 27;
                entryListEMA12Line.add(new Entry(i, lastEMA12));
                entryListEMA26Line.add(new Entry(i, lastEMA26));
            }
        }
    }



    
    /**
     * 转化为BOLL数据
     * MD 标准差
     */
    private void convertToBOLLLine(List<Entry> entryListMBLine, List<Entry> entryListUPLine, List<Entry> entryListDNLine) {
        float  sum = 0f, MA, sumCMA = 0f;
        double MD  = 0;
        for (int i = 0; i < techNodeArray.size(); i++) {
            if (i == 19) {
                sum = firstCalculateMASum(19);
                MA = sum / 20f;
                firstCalculateSumCMA(sumCMA, 19, MA / 20);
                MD = Math.sqrt(Math.pow(sumCMA, 2) / 20);
                entryListMBLine.add(new Entry(i, MA));
                entryListUPLine.add(new Entry(i, (float) (MA + MD * 2)));
                entryListDNLine.add(new Entry(i, (float) (MA - MD * 2)));
            } else if (i > 19) {
                sum = sum - techNodeArray.get(i - 20).getClosePrice() + techNodeArray.get(i).getClosePrice();
                MA = sum / 20;
                sumCMA = sumCMA - (techNodeArray.get(i - 20).getClosePrice() - MA) + (techNodeArray.get(i).getClosePrice() - MA);
                MD = Math.sqrt(Math.pow(sumCMA, 2) / 20);
                entryListMBLine.add(new Entry(i, MA));
                entryListUPLine.add(new Entry(i, (float) (MA + MD * 2)));
                entryListDNLine.add(new Entry(i, (float) (MA - MD * 2)));
            } else if (i < 19) {
                sum += techNodeArray.get(i).getClosePrice();
            }
        }
    }

    /** 计算第一次(C-MA) 的和 */
    private void firstCalculateSumCMA(float sumCMA, int endIndex, float ma20) {
        for (int i = 0; i <= endIndex; i++) {
            sumCMA += techNodeArray.get(i).getClosePrice() - ma20;
        }
    }




       /**
     * 计算布林线
     * MD 标准差
     */
    public static void calculateBOLL(List<TechNodeItemVM> source, List<Entry> entryListMBLine, List<Entry> entryListUPLine, List<Entry> entryListDNLine) {
        float  sum = 0f, MA20, LastTimeMA20, sumCMA = 0f;
        double MD;
        for (int i = 0; i < source.size(); i++) {

            if (i == 20) {
                LastTimeMA20 = sum / 20f;
                sum = sum - source.get(i - 20).getClosePrice() + source.get(i).getClosePrice();
                MA20 = sum / 20f;
                sumCMA = calculateSumCMA(source, 1, 19, MA20);
                MD = Math.sqrt(sumCMA / 20);
                entryListMBLine.add(new Entry(i, LastTimeMA20));
                entryListUPLine.add(new Entry(i, (float) (LastTimeMA20 + MD * 2)));
                entryListDNLine.add(new Entry(i, (float) (LastTimeMA20 - MD * 2)));
            } else if (i > 19) {
                LastTimeMA20 = sum / 20f;
                sum = sum - source.get(i - 20).getClosePrice() + source.get(i).getClosePrice();
                MA20 = sum / 20;
                sumCMA = calculateSumCMA(source, i - 19, i, MA20);
                MD = Math.sqrt(sumCMA / 20);
                entryListMBLine.add(new Entry(i, LastTimeMA20));
                entryListUPLine.add(new Entry(i, (float) (LastTimeMA20 + MD * 2)));
                entryListDNLine.add(new Entry(i, (float) (LastTimeMA20 - MD * 2)));
            } else if (i <= 19) {
                sum += source.get(i).getClosePrice();
            }
        }
    }

    /** 计算(C-MA) 2次方的和 */
    private static int calculateSumCMA(List<TechNodeItemVM> source, int startIndex, int endIndex, float ma20) {
        int sumCMA = 0;
        for (int i = startIndex; i <= endIndex; i++) {
            sumCMA += Math.pow(source.get(i).getClosePrice() - ma20, 2);
        }
        return sumCMA;
    }